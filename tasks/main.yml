---

- name: adding OS specific varibles (for default service name/config path)
  include_vars: "{{ ansible_os_family }}.yml"

- include: install_prerequisites.yml

- name: checking repl
  shell: grep -q "^server-id" "{{ mysql_conf_file }}"
  register: mysql_repl_status
  ignore_errors: true


- name: checking repl setup status
  fail: msg="MySQL replication was setup already"
  when: mysql_repl_status.rc == 0


- name: get hostname
  shell: hostname
  register: hostname


- name: get server-id
  shell: IP=$(ifconfig | grep 'inet addr' | cut -d':' -f2 | awk '{print $1}' | grep -v '127.0.0.1'); mysql -BN -e "select inet_aton('$IP')"
  register: server_id


- name: settings some facts
  set_fact:
    mysql_server_id: "{{server_id.stdout}}"
    mysql_hostname: "{{hostname.stdout}}"
    mysql_tmp_file: /tmp/mysql_repl.config.tmp


- name: creating databases if required
  mysql_db: name={{ item.name }} state=present
  with_items: mysql_repl_db


- include: create_repl_user.yml


- name: templating config
  template: src={{ mysql_repl_type }}.my.cnf.j2 dest={{ mysql_tmp_file }}


- name: assembling my.cnf
  sudo: true
  shell: sed "/\[mysqld\]/r {{ mysql_tmp_file }}" -i {{ mysql_conf_file }}

- name: restarting mysql
  shell: sudo service {{ mysql_service }} restart
  ignore_errors: true


- name: checking if slave is already configured for replication
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'

- debug: msg="{{slave}}"

- name: waiting until master will be available
  wait_for: host={{ mysql_repl_master }} timeout=5
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined



- name: get master status
  mysql_replication: mode=getmaster
  delegate_to: "{{mysql_repl_master}}"
  register: repl_state
  when: slave|failed and mysql_repl_role == "slave" and mysql_repl_master is defined


- name: get password from master
  shell: cat "{{mysql_pswd_folder}}{{mysql_repl_user}}"
  # mysql_replication: mode=getmaster
  delegate_to: "{{mysql_repl_master}}"
  register: pswd
  when: slave|failed and mysql_repl_role == "slave" and mysql_repl_master is defined


- name: connect slave to master
  shell: mysql -e "change master to master_host = '{{mysql_repl_master}}', master_user = '{{mysql_repl_user}}', master_password = '{{pswd.stdout}}', master_log_file = '{{repl_state.File}}', master_log_pos = {{repl_state.Position}}"
  when: slave|failed and mysql_repl_role == "slave" and mysql_repl_master is defined


- name: mysql repl. start & check
  shell: mysql -e 'start slave; select sleep(2); show slave status;'
  when: slave|failed and mysql_repl_role == 'slave' and mysql_repl_master is defined

  